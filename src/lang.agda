module lang where

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; trans; sym; cong; cong-app)
-- open Eq.‚â°-Reasoning using (begin_; _‚â°‚ü®‚ü©_; step-‚â°; _‚àé)
open import Data.Empty using (‚ä• ; ‚ä•-elim)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _*_; _<_; _‚â§?_; z‚â§n; s‚â§s)
open import Relation.Nullary using (¬¨_)
open import Relation.Nullary.Decidable using (True ; toWitness)


-- TODO(FIX): Clean up these infix operators
infix  4 _‚ä¢_
infix  4 _‚àã_
infixl 5 _,_

-- infixr 7 _‚áí_
-- infixr 7 ùïã_‚áí_
infixr 7 _ùïã‚áí_

infix  5 ∆õ_
-- infix  5 Œº_
-- infix  5 Y_
infixl 7 _¬∑_
-- infix  8 `suc_
-- infix  9 `_
infix  9 S_
infix  200 #_
infix  2 _‚Äî‚Üí_


data Ty : Set where
  ùïãùïü   : Ty
  ùïãùïì   : Ty
  _ùïã‚áí_ : Ty ‚Üí Ty ‚Üí Ty

data Ctx : Set where
  ‚àÖ   : Ctx
  _,_ : Ctx ‚Üí Ty ‚Üí Ctx


-- proof that Context contains an element of that type
data _‚àã_ : Ctx ‚Üí Ty ‚Üí Set where
  Z : ‚àÄ {Œì A}
    ‚Üí Œì , A ‚àã A
  S_ : ‚àÄ {Œì A B}
    ‚Üí Œì ‚àã A
    ‚Üí Œì , B ‚àã A

-- the resulting type of evaluating a context
data _‚ä¢_ : Ctx ‚Üí Ty ‚Üí Set where
  Term_ : ‚àÄ {Œì A}
    ‚Üí Œì ‚àã A
    ‚Üí Œì ‚ä¢ A

  ∆õ_ : ‚àÄ {Œì A B}
    ‚Üí Œì , A ‚ä¢ B
    ‚Üí Œì ‚ä¢ A ùïã‚áí B 

  _¬∑_ : ‚àÄ {Œì A B}
    ‚Üí Œì ‚ä¢ A ùïã‚áí B
    ‚Üí Œì ‚ä¢ A
    ‚Üí Œì ‚ä¢ B

  num : ‚àÄ {Œì}
    ‚Üí ‚Ñï
    ‚Üí Œì ‚ä¢ ùïãùïü

  _‚äπ_ : ‚àÄ {Œì}
    ‚Üí Œì ‚ä¢ ùïãùïü
    ‚Üí Œì ‚ä¢ ùïãùïü
    ‚Üí Œì ‚ä¢ ùïãùïü

  _‚òÖ_ : ‚àÄ {Œì}
    ‚Üí Œì ‚ä¢ ùïãùïü
    ‚Üí Œì ‚ä¢ ùïãùïü
    ‚Üí Œì ‚ä¢ ùïãùïü
  -- -- JumpNotZero, the `case` in PLFA
  -- jnz_¬ø_‚ü™_‚à•_‚ü´ : ‚àÄ {Œì A}
  --   ‚Üí Œì ‚ä¢ ùïãùïü
  --   ‚Üí Œì ‚ä¢ A
  --   ‚Üí Œì , ùïãùïü ‚ä¢ A
  --   ‚Üí Œì ‚ä¢ A
 
  true : ‚àÄ {Œì}
    ‚Üí Œì ‚ä¢ ùïãùïì

  false : ‚àÄ {Œì}
    ‚Üí Œì ‚ä¢ ùïãùïì

  ¬ø_‚¶Ö_‚à•_‚¶Ü : ‚àÄ {Œì A}
    ‚Üí Œì ‚ä¢ ùïãùïì -- condition
    ‚Üí Œì ‚ä¢ A -- if True
    ‚Üí Œì ‚ä¢ A -- if False
    ‚Üí Œì ‚ä¢ A

  -- -- fixpoint Y combinator
  -- Y_ : ‚àÄ {Œì A}
  --   ‚Üí Œì , A ‚ä¢ A
  --   ‚Üí Œì ‚ä¢ A

data Val : ‚àÄ {Œì A} ‚Üí Œì ‚ä¢ A ‚Üí Set where
  ùïçùïü     : ‚àÄ {Œì n}
    ‚Üí Val (num {Œì} n)
  ùïçtrue  : ‚àÄ {Œì}
    ‚Üí Val (true  {Œì})
  ùïçfalse : ‚àÄ {Œì}
    ‚Üí Val (false {Œì})
  ùïçclos  : ‚àÄ {Œì A B} ‚Üí {N : Œì , A ‚ä¢ B}
    ‚Üí Val (∆õ N)

{- Helper functions
-}

length : Ctx ‚Üí ‚Ñï
length ‚àÖ         = zero
length ( Œì , _ ) = suc (length Œì)

lookup : {Œì : Ctx} ‚Üí {n : ‚Ñï} ‚Üí (p : n < length Œì) ‚Üí Ty
lookup {(_ , A)} {zero}    (s‚â§s z‚â§n) = A
lookup {(Œì , _)} {(suc n)} (s‚â§s p)   = lookup p

count : ‚àÄ {Œì} ‚Üí {n : ‚Ñï} ‚Üí (p : n < length Œì) ‚Üí Œì ‚àã lookup p
count {_ , _} {zero}    (s‚â§s z‚â§n) = Z
count {Œì , _} {(suc n)} (s‚â§s p)   = S (count p)

{- get the Term `n` declerations back -}
#_ : ‚àÄ {Œì}
  ‚Üí (n : ‚Ñï)
  ‚Üí {n‚ààŒì : True (suc n ‚â§? length Œì)}
  ‚Üí Œì ‚ä¢ lookup (toWitness n‚ààŒì)
#_ n {n‚ààŒì} = Term count (toWitness n‚ààŒì)

{- example programs -}

two : ‚àÄ {Œì} ‚Üí Œì ‚ä¢ ùïãùïü
two = num 2 

twoTimesTwo : ‚àÄ {Œì} ‚Üí Œì ‚ä¢ ùïãùïü
twoTimesTwo = two ‚òÖ two

{- renaming
-}

-- Extension lemma
ext : ‚àÄ {Œì Œî}
  ‚Üí (‚àÄ {A}   ‚Üí     Œì ‚àã A ‚Üí     Œî ‚àã A)
  ‚Üí (‚àÄ {A B} ‚Üí Œì , B ‚àã A ‚Üí Œî , B ‚àã A)
ext œÅ Z      =  Z
ext œÅ (S x)  =  S (œÅ x)

rename : ‚àÄ {Œì Œî}
  ‚Üí (‚àÄ {A} ‚Üí Œì ‚àã A ‚Üí Œî ‚àã A)
  ‚Üí (‚àÄ {A} ‚Üí Œì ‚ä¢ A ‚Üí Œî ‚ä¢ A)
rename œÅ true            = true
rename œÅ false           = false
rename œÅ (∆õ N)           = ∆õ (rename (ext œÅ) N)
rename œÅ (¬ø L ‚¶Ö M ‚à• N ‚¶Ü) = ¬ø (rename œÅ L) ‚¶Ö (rename œÅ M) ‚à• (rename œÅ N) ‚¶Ü
rename œÅ (num M)         = num M
rename œÅ (Term x)        = Term (œÅ x)
rename œÅ (L ‚òÖ M)         = (rename œÅ L) ‚òÖ (rename œÅ M)
rename œÅ (L ‚äπ M)         = (rename œÅ L) ‚äπ (rename œÅ M)
rename œÅ (L ¬∑ M)         = (rename œÅ L) ¬∑ (rename œÅ M)
-- rename œÅ (Œº N)          =  Œº (rename (ext œÅ) N)

exts : ‚àÄ {Œì Œî}
  ‚Üí (‚àÄ {A}   ‚Üí     Œì ‚àã A ‚Üí     Œî ‚ä¢ A)
  ‚Üí (‚àÄ {A B} ‚Üí Œì , B ‚àã A ‚Üí Œî , B ‚ä¢ A)
exts œÉ Z      =  Term Z
exts œÉ (S x)  =  rename S_ (œÉ x)

subst : ‚àÄ {Œì Œî}
  ‚Üí (‚àÄ {A} ‚Üí Œì ‚àã A ‚Üí Œî ‚ä¢ A)
  ‚Üí (‚àÄ {A} ‚Üí Œì ‚ä¢ A ‚Üí Œî ‚ä¢ A)
subst œÉ true             = true
subst œÉ false            = false
subst œÉ (∆õ N)            = ∆õ (subst (exts œÉ) N)
subst œÉ (¬ø L ‚¶Ö M ‚à• N ‚¶Ü ) = ¬ø (subst œÉ L) ‚¶Ö (subst œÉ M) ‚à• (subst œÉ N) ‚¶Ü
subst œÉ (num M)          = (num M)
subst œÉ (Term x)         = œÉ x
subst œÉ (L ‚òÖ M)          = (subst œÉ L) ‚òÖ (subst œÉ M)
subst œÉ (L ‚äπ M)          = (subst œÉ L) ‚äπ (subst œÉ M)
subst œÉ (L ¬∑ M)          = (subst œÉ L) ¬∑ (subst œÉ M)
-- subst œÉ (Œº N)          =  Œº (subst (exts œÉ) N)

-- Substitution
-- substitutes the innermost free variable with the given term
_[_] : ‚àÄ {Œì A B}
  ‚Üí Œì , B ‚ä¢ A
  ‚Üí Œì ‚ä¢ B
  ‚Üí Œì ‚ä¢ A
_[_] {Œì} {A} {B} N M =  subst {Œì , B} {Œì} œÉ {A} N
  where
  œÉ : ‚àÄ {A} ‚Üí Œì , B ‚àã A ‚Üí Œì ‚ä¢ A
  œÉ Z      =  M
  œÉ (S x)  =  Term x


{- Reductions
 Œæ : compatibility, reduce a part of a term
 Œ≤ : eliminate a constructor combined with a destructor
 Œ¥ : apply a built in bifunctor
-}
data _‚Äî‚Üí_ : ‚àÄ {Œì A} ‚Üí (Œì ‚ä¢ A) ‚Üí (Œì ‚ä¢ A) ‚Üí Set where
  -- function is reduced to closure value
  Œæ-¬∑‚ÇÅ : ‚àÄ {Œì A B} {L L‚Ä≤ : Œì ‚ä¢ A ùïã‚áí B} {M : Œì ‚ä¢ A}
    ‚Üí L ‚Äî‚Üí L‚Ä≤
    ‚Üí L ¬∑ M ‚Äî‚Üí L‚Ä≤ ¬∑ M
  -- argument is reduced in function application
  Œæ-¬∑‚ÇÇ : ‚àÄ {Œì A B} {V : Œì ‚ä¢ A ùïã‚áí B} {M M‚Ä≤ : Œì ‚ä¢ A}
    ‚Üí Val V
    ‚Üí M ‚Äî‚Üí M‚Ä≤
    ‚Üí V ¬∑ M ‚Äî‚Üí V ¬∑ M‚Ä≤
  -- apply function
  Œ≤-∆õ : ‚àÄ {Œì A B} {N : Œì , A ‚ä¢ B} {W : Œì ‚ä¢ A}
    ‚Üí Val W
    ‚Üí ((∆õ N) ¬∑ W) ‚Äî‚Üí (N [ W ])
  -- simplify condition
  Œæ-¬ø : ‚àÄ {Œì A} {L L‚Ä≤ : Œì ‚ä¢ ùïãùïì} {M : Œì ‚ä¢ A} {N : Œì ‚ä¢ A}
    ‚Üí L ‚Äî‚Üí L‚Ä≤
    ‚Üí ¬ø L ‚¶Ö M ‚à• N ‚¶Ü ‚Äî‚Üí ¬ø L‚Ä≤ ‚¶Ö M ‚à• N ‚¶Ü
  -- if statement on truth
  Œ≤-¬øtrue : ‚àÄ {Œì A} {M : Œì ‚ä¢ A} {N : Œì ‚ä¢ A}
    ‚Üí ¬ø true ‚¶Ö M ‚à• N ‚¶Ü ‚Äî‚Üí M
  -- if statement on falsity
  Œ≤-¬øfalse : ‚àÄ {Œì A} {M : Œì ‚ä¢ A} {N : Œì ‚ä¢ A}
    ‚Üí ¬ø false ‚¶Ö M ‚à• N ‚¶Ü ‚Äî‚Üí N

  Œæ-‚äπ‚ÇÅ : ‚àÄ {Œì} {L L‚Ä≤ M : Œì ‚ä¢ ùïãùïü}
    ‚Üí L ‚Äî‚Üí L‚Ä≤
    ‚Üí L ‚äπ M ‚Äî‚Üí L‚Ä≤ ‚äπ M
  Œæ-‚äπ‚ÇÇ : ‚àÄ {Œì} {V L L‚Ä≤ : Œì ‚ä¢ ùïãùïü}
    ‚Üí Val V
    ‚Üí L ‚Äî‚Üí L‚Ä≤
    ‚Üí V ‚äπ L ‚Äî‚Üí V ‚äπ L‚Ä≤
  Œ¥-‚äπ : ‚àÄ {Œì c d}
    ‚Üí num {Œì} c ‚äπ num d ‚Äî‚Üí num (c + d)
  Œæ-‚òÖ‚ÇÅ : ‚àÄ {Œì} {L L‚Ä≤ M : Œì ‚ä¢ ùïãùïü}
    ‚Üí L ‚Äî‚Üí L‚Ä≤
    ‚Üí L ‚òÖ M ‚Äî‚Üí L‚Ä≤ ‚òÖ M
  Œæ-‚òÖ‚ÇÇ : ‚àÄ {Œì} {V L L‚Ä≤ : Œì ‚ä¢ ùïãùïü}
    ‚Üí Val V
    ‚Üí L ‚Äî‚Üí L‚Ä≤
    ‚Üí V ‚òÖ L ‚Äî‚Üí V ‚òÖ L‚Ä≤
  Œ¥-‚òÖ : ‚àÄ {Œì c d}
    ‚Üí num {Œì} c ‚òÖ num d ‚Äî‚Üí num (c * d)

  -- apply fixpoint function
  -- Œ≤-Œº : ‚àÄ {Œì A} {N : Œì , A ‚ä¢ A}
  --   ‚Üí Œº N ‚Äî‚Üí N [ Œº N ]

infix  2 _‚Äî‚Ü†_
infix  1 begin_
infixr 2 _‚Äî‚Üí‚ü®_‚ü©_
infix  3 _‚àé

-- Take multiple reduction steps
data _‚Äî‚Ü†_ {Œì A} : (Œì ‚ä¢ A) ‚Üí (Œì ‚ä¢ A) ‚Üí Set where
  _‚àé : (M : Œì ‚ä¢ A)
    ‚Üí M ‚Äî‚Ü† M
  _‚Äî‚Üí‚ü®_‚ü©_ : (L : Œì ‚ä¢ A) {M N : Œì ‚ä¢ A}
    ‚Üí L ‚Äî‚Üí M
    ‚Üí M ‚Äî‚Ü† N
    ‚Üí L ‚Äî‚Ü† N

begin_ : ‚àÄ {Œì A} {M N : Œì ‚ä¢ A}
  ‚Üí M ‚Äî‚Ü† N
  ‚Üí M ‚Äî‚Ü† N
begin M‚Äî‚Ü†N = M‚Äî‚Ü†N


data Progress {A} (M : ‚àÖ ‚ä¢ A) : Set where

  step : ‚àÄ {N : ‚àÖ ‚ä¢ A}
    ‚Üí M ‚Äî‚Üí N
    ‚Üí Progress M

  done :
      Val M
    ‚Üí Progress M

progress : ‚àÄ {A} ‚Üí (M : ‚àÖ ‚ä¢ A) ‚Üí Progress M
progress (Term ())
progress (∆õ N)                          =  done ùïçclos
progress (L ¬∑ M) with progress L
...    | step L‚Äî‚ÜíL‚Ä≤                     =  step (Œæ-¬∑‚ÇÅ L‚Äî‚ÜíL‚Ä≤)
...    | done ùïçclos with progress M
...        | step M‚Äî‚ÜíM‚Ä≤                 =  step (Œæ-¬∑‚ÇÇ ùïçclos M‚Äî‚ÜíM‚Ä≤)
...        | done VM                    =  step (Œ≤-∆õ VM)
progress (num n)                        =  done ùïçùïü
progress (L ‚äπ M) with progress L
...    | step L‚Äî‚ÜíL‚Ä≤                     =  step (Œæ-‚äπ‚ÇÅ L‚Äî‚ÜíL‚Ä≤)
...    | done ùïçùïü with progress M
...        | step M‚Äî‚ÜíM‚Ä≤                 =  step (Œæ-‚äπ‚ÇÇ ùïçùïü M‚Äî‚ÜíM‚Ä≤)
...        | done ùïçùïü                    =  step (Œ¥-‚äπ)
progress (L ‚òÖ M) with progress L
...    | step L‚Äî‚ÜíL‚Ä≤                     =  step (Œæ-‚òÖ‚ÇÅ L‚Äî‚ÜíL‚Ä≤)
...    | done ùïçùïü with progress M
...        | step M‚Äî‚ÜíM‚Ä≤                 =  step (Œæ-‚òÖ‚ÇÇ ùïçùïü M‚Äî‚ÜíM‚Ä≤)
...        | done ùïçùïü                    =  step (Œ¥-‚òÖ)
progress (true) = done ùïçtrue
progress (false) = done ùïçfalse
progress (¬ø C ‚¶Ö T ‚à• F ‚¶Ü ) with progress C
...    | step C‚Äî‚ÜíC‚Ä≤                     = step (Œæ-¬ø C‚Äî‚ÜíC‚Ä≤)
...    | done ùïçtrue                     = step (Œ≤-¬øtrue)
...    | done ùïçfalse                    = step (Œ≤-¬øfalse)
-- progress (`suc M) with progress M
-- ...    | step M‚Äî‚ÜíM‚Ä≤                     =  step (Œæ-suc M‚Äî‚ÜíM‚Ä≤)
-- ...    | done VM                        =  done (V-suc VM)
-- progress (case L M N) with progress L
-- ...    | step L‚Äî‚ÜíL‚Ä≤                     =  step (Œæ-case L‚Äî‚ÜíL‚Ä≤)
-- ...    | done V-zero                    =  step (Œ≤-zero)
-- ...    | done (V-suc VL)                =  step (Œ≤-suc VL)
-- progress (Œº N)                          =  step (Œ≤-Œº)

record Gas : Set where
  constructor gas
  field
    amount : ‚Ñï

data Finished {Œì A} (N : Œì ‚ä¢ A) : Set where
   done :
       Val N
     ‚Üí Finished N
   out-of-gas :
       Finished N

data Steps {A} : ‚àÖ ‚ä¢ A ‚Üí Set where

  steps : {L N : ‚àÖ ‚ä¢ A}
    ‚Üí L ‚Äî‚Ü† N
    ‚Üí Finished N
    ‚Üí Steps L

eval : ‚àÄ {A}
  ‚Üí Gas
  ‚Üí (L : ‚àÖ ‚ä¢ A)
  ‚Üí Steps L
eval (gas zero)    L                     =  steps (L ‚àé) out-of-gas
eval (gas (suc m)) L with progress L
... | done VL                            =  steps (L ‚àé) (done VL)
... | step {M} L‚Äî‚ÜíM with eval (gas m) M
...    | steps M‚Äî‚Ü†N fin                  =  steps (L ‚Äî‚Üí‚ü® L‚Äî‚ÜíM ‚ü© M‚Äî‚Ü†N) fin



plus : ‚àÖ ‚ä¢ ùïãùïü ùïã‚áí ùïãùïü ùïã‚áí ùïãùïü
plus = ∆õ (∆õ ( ( # 1 ) ‚äπ  # 0 ))

2+2=4 : plus ¬∑ two ¬∑ two ‚Äî‚Ü† ( num 4 )
2+2=4 = begin
  ((∆õ (∆õ ((Term (S Z)) ‚äπ (Term Z)))) ¬∑ num 2 ¬∑ num 2 ‚Äî‚Üí‚ü®
    Œæ-¬∑‚ÇÅ (Œ≤-∆õ ùïçùïü) ‚ü©
    (∆õ (num 2 ‚äπ (Term Z))) ¬∑ num 2 ‚Äî‚Üí‚ü® Œ≤-∆õ ùïçùïü ‚ü©
    (num 2 ‚äπ num 2) ‚Äî‚Üí‚ü® Œ¥-‚äπ ‚ü© num 4 ‚àé)
